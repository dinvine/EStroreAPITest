// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EStoreShoppingSys.EricSample
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Authentication")]
    public partial class AuthenticationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Authentication.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Authentication", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Post operation for registering a new account with new username and passwor" +
            "d")]
        [NUnit.Framework.CategoryAttribute("Authentication")]
        [NUnit.Framework.CategoryAttribute("Scenario_1")]
        [NUnit.Framework.CategoryAttribute("RegisterUser")]
        public virtual void VerifyPostOperationForRegisteringANewAccountWithNewUsernameAndPassword()
        {
            string[] tagsOfScenario = new string[] {
                    "Authentication",
                    "Scenario_1",
                    "RegisterUser"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Post operation for registering a new account with new username and passwor" +
                    "d", null, new string[] {
                        "Authentication",
                        "Scenario_1",
                        "RegisterUser"});
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table1.AddRow(new string[] {
                            "username",
                            "username"});
                table1.AddRow(new string[] {
                            "password",
                            "password"});
#line 8
 testRunner.Given("I perform a RegisterUser POST operation for e-store/authentication/register with " +
                        "body", ((string)(null)), table1, "Given ");
#line hidden
#line 12
 testRunner.Then("I should have the response with status code OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.And("I should save the accountNumber from the response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Post operation for registering a new account with existing username and pa" +
            "ssword")]
        [NUnit.Framework.CategoryAttribute("Authentication")]
        [NUnit.Framework.CategoryAttribute("Scenario_2")]
        [NUnit.Framework.CategoryAttribute("RegisterUser")]
        public virtual void VerifyPostOperationForRegisteringANewAccountWithExistingUsernameAndPassword()
        {
            string[] tagsOfScenario = new string[] {
                    "Authentication",
                    "Scenario_2",
                    "RegisterUser"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Post operation for registering a new account with existing username and pa" +
                    "ssword", null, new string[] {
                        "Authentication",
                        "Scenario_2",
                        "RegisterUser"});
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table2.AddRow(new string[] {
                            "username",
                            "username"});
                table2.AddRow(new string[] {
                            "password",
                            "password"});
#line 17
 testRunner.Given("I register a new account with new username and password", ((string)(null)), table2, "Given ");
#line hidden
#line 21
 testRunner.When("I register a new account with above username and password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("error message should say Error：Registered account！", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register with previous username once the related account was deleted")]
        [NUnit.Framework.CategoryAttribute("Authentication")]
        [NUnit.Framework.CategoryAttribute("Scenario_3")]
        [NUnit.Framework.CategoryAttribute("RegisterUser")]
        public virtual void RegisterWithPreviousUsernameOnceTheRelatedAccountWasDeleted()
        {
            string[] tagsOfScenario = new string[] {
                    "Authentication",
                    "Scenario_3",
                    "RegisterUser"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register with previous username once the related account was deleted", null, new string[] {
                        "Authentication",
                        "Scenario_3",
                        "RegisterUser"});
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table3.AddRow(new string[] {
                            "username",
                            "username"});
                table3.AddRow(new string[] {
                            "password",
                            "password"});
#line 26
 testRunner.Given("I register a new account with new username and password", ((string)(null)), table3, "Given ");
#line hidden
#line 30
 testRunner.When("I delete the above user account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.And("I register a new account with above username and password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.Then("I should have the response with status code OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Fail to get item information without invalid auth")]
        [NUnit.Framework.CategoryAttribute("Authentication")]
        [NUnit.Framework.CategoryAttribute("Scenario_4")]
        [NUnit.Framework.CategoryAttribute("RegisterUser")]
        public virtual void FailToGetItemInformationWithoutInvalidAuth()
        {
            string[] tagsOfScenario = new string[] {
                    "Authentication",
                    "Scenario_4",
                    "RegisterUser"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fail to get item information without invalid auth", null, new string[] {
                        "Authentication",
                        "Scenario_4",
                        "RegisterUser"});
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table4.AddRow(new string[] {
                            "username",
                            "username"});
                table4.AddRow(new string[] {
                            "password",
                            "password"});
#line 36
 testRunner.Given("I register a new account with new username and password", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table5.AddRow(new string[] {
                            "username",
                            "username"});
                table5.AddRow(new string[] {
                            "password",
                            "password"});
                table5.AddRow(new string[] {
                            "browserId",
                            "abcdef"});
#line 40
 testRunner.And("I get JWT authentication of user with following credentials", ((string)(null)), table5, "And ");
#line hidden
#line 45
 testRunner.And("I perform a GET operation for e-store/sales-data/items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("I perform GET operation for SalesData with invalid auth", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Then("error message should say Error：你还没有登录！", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to get item information without valid auth")]
        [NUnit.Framework.CategoryAttribute("Authentication")]
        [NUnit.Framework.CategoryAttribute("Scenario_5")]
        [NUnit.Framework.CategoryAttribute("RegisterUser")]
        public virtual void AbleToGetItemInformationWithoutValidAuth()
        {
            string[] tagsOfScenario = new string[] {
                    "Authentication",
                    "Scenario_5",
                    "RegisterUser"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to get item information without valid auth", null, new string[] {
                        "Authentication",
                        "Scenario_5",
                        "RegisterUser"});
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table6.AddRow(new string[] {
                            "username",
                            "username"});
                table6.AddRow(new string[] {
                            "password",
                            "password"});
#line 52
 testRunner.Given("I register a new account with new username and password", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table7.AddRow(new string[] {
                            "username",
                            "username"});
                table7.AddRow(new string[] {
                            "password",
                            "password"});
                table7.AddRow(new string[] {
                            "browserId",
                            "abcdef"});
#line 56
 testRunner.And("I get JWT authentication of user with following credentials", ((string)(null)), table7, "And ");
#line hidden
#line 61
 testRunner.And("I perform a GET operation for e-store/sales-data/items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("I perform operation for GET SalesData", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.Then("I should have the response with status code OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Post operation for successful authentication of an existing customer")]
        [NUnit.Framework.CategoryAttribute("Authentication")]
        public virtual void VerifyPostOperationForSuccessfulAuthenticationOfAnExistingCustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "Authentication"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Post operation for successful authentication of an existing customer", null, new string[] {
                        "Authentication"});
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table8.AddRow(new string[] {
                            "username",
                            "apitest010"});
                table8.AddRow(new string[] {
                            "password",
                            "apitest"});
                table8.AddRow(new string[] {
                            "browserId",
                            "abcdef"});
#line 68
 testRunner.Given("I get JWT authentication of user with following credentials", ((string)(null)), table8, "Given ");
#line hidden
#line 73
 testRunner.Then("I should have the response with status code OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
